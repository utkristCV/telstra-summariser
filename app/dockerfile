# https://nanmu.me/en/posts/2023/quick-dockerfile-for-python-poetry-projects/
# `python-base` sets up all our shared environment variables
FROM python:3.13-slim-bullseye as python-base

    # python
ENV PYTHONUNBUFFERED=1 \
    # prevents python creating .pyc files
    PYTHONDONTWRITEBYTECODE=1 \
    \
    # pip
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    \
    # poetry
    # https://python-poetry.org/docs/configuration/#using-environment-variables
    POETRY_VERSION=2.1.4 \
    # make poetry install to this location
    POETRY_HOME="/opt/poetry" \
    # make poetry create the virtual environment in the project's root
    # it gets named `.venv`
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    # do not ask any interactive question
    POETRY_NO_INTERACTION=1 \
    \
    # paths
    # this is where our requirements + virtual environment will live
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="/opt/pysetup/.venv"

# prepend poetry and venv to path
ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"

# `builder-base` stage is used to build deps + create our virtual environment
FROM python-base as builder-base

# Upgrade system packages to fix vulnerabilities
RUN apt-get update && apt-get upgrade -y \
    && apt-get install --no-install-recommends -y \
        # deps for installing poetry
        curl \
        # deps for building python deps
        build-essential \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# install poetry - respects $POETRY_VERSION & $POETRY_HOME
RUN pip3 install poetry==$POETRY_VERSION

# copy project requirement files here to ensure they will be cached.
WORKDIR $PYSETUP_PATH
COPY pyproject.toml poetry.lock ./

# install runtime deps - uses $POETRY_VIRTUALENVS_IN_PROJECT internally
RUN poetry install --no-root

# `production` image used for runtime
FROM python-base as production

# Upgrade system packages to fix vulnerabilities
RUN apt-get update && apt-get upgrade -y && apt-get clean && rm -rf /var/lib/apt/lists/*

# Copy built virtual environment from builder-base
COPY --from=builder-base $PYSETUP_PATH $PYSETUP_PATH

# Copy application code
COPY . /usr/src/app/
WORKDIR /usr/src/app

EXPOSE 5000

# Create a startup script that calculates workers dynamically with override option
RUN echo '#!/bin/bash\n\
if [ -n "$GUNICORN_WORKERS" ]; then\n\
    WORKERS=$GUNICORN_WORKERS\n\
    echo "Using override: $WORKERS workers"\n\
else\n\
    WORKERS=$((2 * $(nproc) + 1))\n\
    echo "Auto-calculated: $WORKERS workers ($(nproc) CPU cores detected)"\n\
fi\n\
exec gunicorn -k uvicorn.workers.UvicornWorker -w $WORKERS -t 300 -b 0.0.0.0:8000 main:app' > /start.sh \
    && chmod +x /start.sh

CMD ["/start.sh"]